# src/core/config_manager.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
設定管理モジュール - LLM Code Assistant

アプリケーションの設定を管理するモジュール
"""

import json
import os
import yaml
from pathlib import Path
from typing import Dict, Any, Optional, List
from dataclasses import dataclass, field, asdict
from src.core.logger import get_logger

logger = get_logger(__name__)

@dataclass
class LLMConfig:
    """LLM設定クラス"""
    # プロバイダー設定
    provider: str = "openai"
    
    # OpenAI設定
    openai_api_key: str = ""
    openai_model: str = "gpt-4"
    openai_max_tokens: int = 4096
    openai_temperature: float = 0.7
    openai_base_url: str = "https://api.openai.com/v1"
    
    # Claude設定
    claude_api_key: str = ""
    claude_model: str = "claude-3-sonnet-20240229"
    claude_max_tokens: int = 4096
    claude_temperature: float = 0.7
    claude_base_url: str = "https://api.anthropic.com"
    
    # Azure OpenAI設定
    azure_openai_api_key: str = ""
    azure_openai_endpoint: str = ""
    azure_openai_api_version: str = "2024-02-01"
    azure_openai_deployment_name: str = "gpt-4"
    
    # ローカルLLM設定
    local_llm_model_path: str = "models/"
    local_llm_model_name: str = "codellama:7b-instruct"
    
    # Hugging Face設定
    huggingface_token: str = ""
    huggingface_cache_dir: str = "models/huggingface_cache/"
    
    # Ollama設定
    ollama_base_url: str = "http://localhost:11434"
    ollama_model: str = "codellama:7b-instruct"
    
    # LlamaCpp設定
    llamacpp_model_path: str = "models/llama-2-7b-chat.gguf"
    llamacpp_n_ctx: int = 4096
    llamacpp_n_threads: int = 8
    llamacpp_n_gpu_layers: int = 0
    
    # 埋め込みモデル設定
    embedding_model: str = "sentence-transformers/all-MiniLM-L6-v2"
    embedding_dimension: int = 384
    
    # 共通設定
    max_retries: int = 3
    timeout: int = 30
    
    def __post_init__(self):
        """初期化後の処理"""
        # 環境変数から設定を読み込み
        self._load_from_env()
    
    def _load_from_env(self):
        """環境変数から設定を読み込み"""
        env_mappings = {
            'OPENAI_API_KEY': 'openai_api_key',
            'OPENAI_MODEL': 'openai_model',
            'OPENAI_MAX_TOKENS': 'openai_max_tokens',
            'OPENAI_TEMPERATURE': 'openai_temperature',
            'OPENAI_BASE_URL': 'openai_base_url',
            'CLAUDE_API_KEY': 'claude_api_key',
            'CLAUDE_MODEL': 'claude_model',
            'CLAUDE_MAX_TOKENS': 'claude_max_tokens',
            'CLAUDE_TEMPERATURE': 'claude_temperature',
            'CLAUDE_BASE_URL': 'claude_base_url',
            'AZURE_OPENAI_API_KEY': 'azure_openai_api_key',
            'AZURE_OPENAI_ENDPOINT': 'azure_openai_endpoint',
            'AZURE_OPENAI_API_VERSION': 'azure_openai_api_version',
            'AZURE_OPENAI_DEPLOYMENT_NAME': 'azure_openai_deployment_name',
            'LOCAL_LLM_MODEL_PATH': 'local_llm_model_path',
            'LOCAL_LLM_MODEL_NAME': 'local_llm_model_name',
            'HUGGINGFACE_TOKEN': 'huggingface_token',
            'HUGGINGFACE_CACHE_DIR': 'huggingface_cache_dir',
            'OLLAMA_BASE_URL': 'ollama_base_url',
            'OLLAMA_MODEL': 'ollama_model',
            'LLAMACPP_MODEL_PATH': 'llamacpp_model_path',
            'LLAMACPP_N_CTX': 'llamacpp_n_ctx',
            'LLAMACPP_N_THREADS': 'llamacpp_n_threads',
            'LLAMACPP_N_GPU_LAYERS': 'llamacpp_n_gpu_layers',
            'EMBEDDING_MODEL': 'embedding_model',
            'EMBEDDING_DIMENSION': 'embedding_dimension',
            'DEFAULT_LLM_PROVIDER': 'provider'
        }
        
        for env_key, attr_name in env_mappings.items():
            env_value = os.getenv(env_key)
            if env_value:
                current_value = getattr(self, attr_name)
                if isinstance(current_value, int):
                    try:
                        setattr(self, attr_name, int(env_value))
                    except ValueError:
                        logger.warning(f"環境変数 {env_key} の値 '{env_value}' を整数に変換できません")
                elif isinstance(current_value, float):
                    try:
                        setattr(self, attr_name, float(env_value))
                    except ValueError:
                        logger.warning(f"環境変数 {env_key} の値 '{env_value}' を浮動小数点数に変換できません")
                else:
                    setattr(self, attr_name, env_value)

@dataclass
class UIConfig:
    """UI設定クラス"""
    theme: str = "dark"
    font_family: str = "Consolas"
    font_size: int = 12
    window_width: int = 1200
    window_height: int = 800
    window_maximized: bool = False
    language: str = "ja"
    auto_save: bool = True
    auto_save_interval: int = 300  # 秒
    show_line_numbers: bool = True
    word_wrap: bool = True
    syntax_highlighting: bool = True

@dataclass
class DatabaseConfig:
    """データベース設定クラス"""
    database_url: str = "sqlite:///data/database/llm_assistant.db"
    vector_db_path: str = "data/vector_db/"
    vector_db_type: str = "faiss"
    backup_enabled: bool = True
    backup_interval: int = 3600  # 秒
    max_backups: int = 10

@dataclass
class SecurityConfig:
    """セキュリティ設定クラス"""
    encryption_key: str = ""
    session_secret_key: str = ""
    session_timeout: int = 3600
    jwt_secret_key: str = ""
    jwt_algorithm: str = "HS256"
    jwt_expiration: int = 86400
    enable_encryption: bool = True

@dataclass
class PerformanceConfig:
    """パフォーマンス設定クラス"""
    worker_processes: int = 4
    max_connections: int = 100
    request_timeout: int = 30
    response_timeout: int = 60
    batch_size: int = 32
    cache_enabled: bool = True
    cache_size: int = 1000
    cache_ttl: int = 3600

@dataclass
class PluginConfig:
    """プラグイン設定クラス"""
    plugin_dir: str = "src/plugins/"
    auto_load_plugins: bool = True
    enabled_plugins: List[str] = field(default_factory=lambda: ["git_integration", "code_formatter", "export_tools"])

@dataclass
class AppConfig:
    """アプリケーション設定クラス"""
    app_name: str = "LLM Code Assistant"
    version: str = "1.0.0"
    environment: str = "development"
    debug: bool = True
    log_level: str = "INFO"
    
    # 各種設定
    llm: LLMConfig = field(default_factory=LLMConfig)
    ui: UIConfig = field(default_factory=UIConfig)
    database: DatabaseConfig = field(default_factory=DatabaseConfig)
    security: SecurityConfig = field(default_factory=SecurityConfig)
    performance: PerformanceConfig = field(default_factory=PerformanceConfig)
    plugins: PluginConfig = field(default_factory=PluginConfig)

class ConfigManager:
    """設定管理クラス"""
    
    def __init__(self, config_dir: str = "config"):
        """
        設定管理クラスの初期化
        
        Args:
            config_dir: 設定ファイルディレクトリ
        """
        self.config_dir = Path(config_dir)
        self.config_file = self.config_dir / "default_settings.json"
        self.user_config_file = self.config_dir / "user_settings.json"
        
        # 設定ディレクトリの作成
        self.config_dir.mkdir(parents=True, exist_ok=True)
        
        # 設定の読み込み
        try:
            self.config: AppConfig = self._load_config()
            logger.info("設定ファイルの読み込みが完了しました")
        except Exception as e:
            logger.error(f"設定ファイルの読み込みに失敗: {e}")
            raise
    
    def _load_config(self) -> AppConfig:
        """設定ファイルの読み込み"""
        try:
            # ユーザー設定ファイルが存在する場合
            if self.user_config_file.exists():
                logger.info("ユーザー設定ファイルを読み込み中...")
                return self._load_user_config()
            
            # デフォルト設定ファイルが存在する場合
            elif self.config_file.exists():
                logger.info("デフォルト設定ファイルを読み込み中...")
                return self._load_default_config_from_file()
            
            # 設定ファイルが存在しない場合
            else:
                logger.info("設定ファイルが存在しないため、デフォルト設定を使用")
                return self._load_default_config()
                
        except Exception as e:
            logger.error(f"設定ファイルの読み込みに失敗: {e}")
            # フォールバックとしてデフォルト設定を使用
            logger.info("デフォルト設定にフォールバック")
            return self._load_default_config()
    
    def _load_default_config(self) -> AppConfig:
        """デフォルト設定の読み込み"""
        try:
            # デフォルト設定を作成
            default_config = {
                "app_name": "LLM Code Assistant",
                "version": "1.0.0",
                "environment": "development",
                "debug": True,
                "log_level": "INFO",
                "llm": {
                    "provider": "openai",
                    "openai_api_key": "",
                    "openai_model": "gpt-4",
                    "openai_max_tokens": 4096,
                    "openai_temperature": 0.7,
                    "openai_base_url": "https://api.openai.com/v1",
                    "claude_api_key": "",
                    "claude_model": "claude-3-sonnet-20240229",
                    "claude_max_tokens": 4096,
                    "claude_temperature": 0.7,
                    "claude_base_url": "https://api.anthropic.com",
                    "azure_openai_api_key": "",
                    "azure_openai_endpoint": "",
                    "azure_openai_api_version": "2024-02-01",
                    "azure_openai_deployment_name": "gpt-4",
                    "local_llm_model_path": "models/",
                    "local_llm_model_name": "codellama:7b-instruct",
                    "huggingface_token": "",
                    "huggingface_cache_dir": "models/huggingface_cache/",
                    "ollama_base_url": "http://localhost:11434",
                    "ollama_model": "codellama:7b-instruct",
                    "llamacpp_model_path": "models/llama-2-7b-chat.gguf",
                    "llamacpp_n_ctx": 4096,
                    "llamacpp_n_threads": 8,
                    "llamacpp_n_gpu_layers": 0,
                    "embedding_model": "sentence-transformers/all-MiniLM-L6-v2",
                    "embedding_dimension": 384,
                    "max_retries": 3,
                    "timeout": 30
                },
                "ui": {
                    "theme": "dark",
                    "font_family": "Consolas",
                    "font_size": 12,
                    "window_width": 1200,
                    "window_height": 800,
                    "window_maximized": False,
                    "language": "ja",
                    "auto_save": True,
                    "auto_save_interval": 300,
                    "show_line_numbers": True,
                    "word_wrap": True,
                    "syntax_highlighting": True
                },
                "database": {
                    "database_url": "sqlite:///data/database/llm_assistant.db",
                    "vector_db_path": "data/vector_db/",
                    "vector_db_type": "faiss",
                    "backup_enabled": True,
                    "backup_interval": 3600,
                    "max_backups": 10
                },
                "security": {
                    "encryption_key": "",
                    "session_secret_key": "",
                    "session_timeout": 3600,
                    "jwt_secret_key": "",
                    "jwt_algorithm": "HS256",
                    "jwt_expiration": 86400,
                    "enable_encryption": True
                },
                "performance": {
                    "worker_processes": 4,
                    "max_connections": 100,
                    "request_timeout": 30,
                    "response_timeout": 60,
                    "batch_size": 32,
                    "cache_enabled": True,
                    "cache_size": 1000,
                    "cache_ttl": 3600
                },
                "plugins": {
                    "plugin_dir": "src/plugins/",
                    "auto_load_plugins": True,
                    "enabled_plugins": ["git_integration", "code_formatter", "export_tools"]
                }
            }
            
            # AppConfigオブジェクトの作成
            config = AppConfig(
                app_name=default_config["app_name"],
                version=default_config["version"],
                environment=default_config["environment"],
                debug=default_config["debug"],
                log_level=default_config["log_level"],
                llm=LLMConfig(**default_config["llm"]),
                ui=UIConfig(**default_config["ui"]),
                database=DatabaseConfig(**default_config["database"]),
                security=SecurityConfig(**default_config["security"]),
                performance=PerformanceConfig(**default_config["performance"]),
                plugins=PluginConfig(**default_config["plugins"])
            )
            
            # デフォルト設定ファイルを保存
            self._save_default_config(default_config)
            
            return config
            
        except Exception as e:
            logger.error(f"デフォルト設定の作成に失敗: {e}")
            raise
    
    def _load_default_config_from_file(self) -> AppConfig:
        """ファイルからデフォルト設定を読み込み"""
        try:
            with open(self.config_file, 'r', encoding='utf-8') as f:
                config_data = json.load(f)
            
            return AppConfig(
                app_name=config_data.get("app_name", "LLM Code Assistant"),
                version=config_data.get("version", "1.0.0"),
                environment=config_data.get("environment", "development"),
                debug=config_data.get("debug", True),
                log_level=config_data.get("log_level", "INFO"),
                llm=LLMConfig(**config_data.get("llm", {})),
                ui=UIConfig(**config_data.get("ui", {})),
                database=DatabaseConfig(**config_data.get("database", {})),
                security=SecurityConfig(**config_data.get("security", {})),
                performance=PerformanceConfig(**config_data.get("performance", {})),
                plugins=PluginConfig(**config_data.get("plugins", {}))
            )
            
        except Exception as e:
            logger.error(f"設定ファイルの読み込みに失敗: {e}")
            return self._load_default_config()
    
    def _load_user_config(self) -> AppConfig:
        """ユーザー設定ファイルの読み込み"""
        try:
            with open(self.user_config_file, 'r', encoding='utf-8') as f:
                config_data = json.load(f)
            
            return AppConfig(
                app_name=config_data.get("app_name", "LLM Code Assistant"),
                version=config_data.get("version", "1.0.0"),
                environment=config_data.get("environment", "development"),
                debug=config_data.get("debug", True),
                log_level=config_data.get("log_level", "INFO"),
                llm=LLMConfig(**config_data.get("llm", {})),
                ui=UIConfig(**config_data.get("ui", {})),
                database=DatabaseConfig(**config_data.get("database", {})),
                security=SecurityConfig(**config_data.get("security", {})),
                performance=PerformanceConfig(**config_data.get("performance", {})),
                plugins=PluginConfig(**config_data.get("plugins", {}))
            )
            
        except Exception as e:
            logger.error(f"ユーザー設定ファイルの読み込みに失敗: {e}")
            return self._load_default_config()
    
    def _save_default_config(self, config_data: Dict[str, Any]):
        """デフォルト設定ファイルの保存"""
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(config_data, f, indent=2, ensure_ascii=False)
            logger.info(f"デフォルト設定ファイルを保存: {self.config_file}")
        except Exception as e:
            logger.error(f"デフォルト設定ファイルの保存に失敗: {e}")
    
    def save_config(self, config: Optional[AppConfig] = None):
        """設定の保存"""
        try:
            if config is None:
                config = self.config
            
            config_data = asdict(config)
            
            with open(self.user_config_file, 'w', encoding='utf-8') as f:
                json.dump(config_data, f, indent=2, ensure_ascii=False)
            
            logger.info(f"設定ファイルを保存: {self.user_config_file}")
            
        except Exception as e:
            logger.error(f"設定ファイルの保存に失敗: {e}")
            raise
    
    def get_config(self) -> AppConfig:
        """設定の取得"""
        return self.config
    
    def update_config(self, **kwargs):
        """設定の更新"""
        try:
            for key, value in kwargs.items():
                if hasattr(self.config, key):
                    setattr(self.config, key, value)
                    logger.info(f"設定を更新: {key} = {value}")
                else:
                    logger.warning(f"不明な設定項目: {key}")
            
            # 設定の保存
            self.save_config()
            
        except Exception as e:
            logger.error(f"設定の更新に失敗: {e}")
            raise
    
    def reset_config(self):
        """設定のリセット"""
        try:
            self.config = self._load_default_config()
            self.save_config()
            logger.info("設定をデフォルトにリセットしました")
        except Exception as e:
            logger.error(f"設定のリセットに失敗: {e}")
            raise

# グローバル設定マネージャーインスタンス
config_manager = ConfigManager()

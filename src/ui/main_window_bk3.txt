#src/ui/main_window.py
"""
メインウィンドウモジュール
アプリケーションのメインUIを提供
"""

import sys
import logging
from typing import Optional, Dict, Any
from pathlib import Path

from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QVBoxLayout, QHBoxLayout,
    QWidget, QPushButton, QTextEdit, QLineEdit, QLabel,
    QSplitter, QTreeWidget, QTreeWidgetItem, QTabWidget,
    QMenuBar, QMenu, QStatusBar, QToolBar, QMessageBox
)
from PyQt6.QtGui import QAction
from PyQt6.QtCore import Qt, pyqtSignal

# 修正：正しいインポート方法に変更
from ..core.config_manager import ConfigManager
from ..core.event_system import EventBus
from ..core.plugin_manager import PluginManager

logger = logging.getLogger(__name__)

class MainWindow(QMainWindow):
    """
    メインウィンドウクラス
    アプリケーションのメインUIを管理
    """
    
    # シグナル定義
    window_closed = pyqtSignal()
    
    def __init__(self):
        """メインウィンドウを初期化"""
        super().__init__()
        
        # 設定とコアコンポーネントの初期化
        self.config_manager = ConfigManager()
        self.event_bus = EventBus()
        self.plugin_manager = PluginManager()
        
        # 設定の読み込み
        self.config = self.config_manager.config
        
        # UI初期化
        self.init_ui()
        self.setup_menu()
        self.setup_toolbar()
        self.setup_statusbar()
        
        # イベント接続
        self.connect_events()
        
        logger.info("メインウィンドウが初期化されました")
    
    def init_ui(self):
        """UIを初期化"""
        # ウィンドウ設定
        app_name = self.config.get('app', {}).get('name', 'LLM Application')
        self.setWindowTitle(app_name)
        self.setGeometry(100, 100, 1200, 800)
        
        # 中央ウィジェット
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # メインレイアウト
        main_layout = QHBoxLayout(central_widget)
        
        # スプリッター
        splitter = QSplitter(Qt.Orientation.Horizontal)
        main_layout.addWidget(splitter)
        
        # 左パネル（プロジェクトツリー）
        self.setup_left_panel(splitter)
        
        # 右パネル（メインエリア）
        self.setup_right_panel(splitter)
        
        # スプリッターの比率設定
        splitter.setSizes([300, 900])
    
    def setup_left_panel(self, parent):
        """左パネルを設定"""
        left_widget = QWidget()
        left_layout = QVBoxLayout(left_widget)
        
        # プロジェクトツリー
        self.project_tree = QTreeWidget()
        self.project_tree.setHeaderLabel("プロジェクト")
        
        # サンプルアイテムを追加
        root_item = QTreeWidgetItem(["プロジェクト1"])
        child_item = QTreeWidgetItem(["ファイル1.txt"])
        root_item.addChild(child_item)
        self.project_tree.addTopLevelItem(root_item)
        
        left_layout.addWidget(self.project_tree)
        parent.addWidget(left_widget)
    
    def setup_right_panel(self, parent):
        """右パネルを設定"""
        right_widget = QWidget()
        right_layout = QVBoxLayout(right_widget)
        
        # タブウィジェット
        self.tab_widget = QTabWidget()
        right_layout.addWidget(self.tab_widget)
        
        # チャットタブ
        self.setup_chat_tab()
        
        parent.addWidget(right_widget)
    
    def setup_chat_tab(self):
        """チャットタブを設定"""
        chat_widget = QWidget()
        chat_layout = QVBoxLayout(chat_widget)
        
        # チャット表示エリア
        self.chat_display = QTextEdit()
        self.chat_display.setReadOnly(True)
        self.chat_display.setPlaceholderText("チャットメッセージがここに表示されます...")
        chat_layout.addWidget(self.chat_display)
        
        # 入力エリア
        input_layout = QHBoxLayout()
        self.chat_input = QLineEdit()
        self.chat_input.setPlaceholderText("メッセージを入力してください...")
        self.send_button = QPushButton("送信")
        
        input_layout.addWidget(self.chat_input)
        input_layout.addWidget(self.send_button)
        chat_layout.addLayout(input_layout)
        
        self.tab_widget.addTab(chat_widget, "チャット")
        
        # イベント接続
        self.send_button.clicked.connect(self.send_message)
        self.chat_input.returnPressed.connect(self.send_message)
    
    def setup_menu(self):
        """メニューバーを設定"""
        menubar = self.menuBar()
        
        # ファイルメニュー
        file_menu = menubar.addMenu('ファイル(&F)')
        
        # 新規作成アクション
        new_action = QAction('新規作成(&N)', self)
        new_action.setShortcut('Ctrl+N')
        new_action.setStatusTip('新しいファイルを作成します')
        new_action.triggered.connect(self.new_file)
        file_menu.addAction(new_action)
        
        # 開くアクション
        open_action = QAction('開く(&O)', self)
        open_action.setShortcut('Ctrl+O')
        open_action.setStatusTip('ファイルを開きます')
        open_action.triggered.connect(self.open_file)
        file_menu.addAction(open_action)
        
        # 保存アクション
        save_action = QAction('保存(&S)', self)
        save_action.setShortcut('Ctrl+S')
        save_action.setStatusTip('ファイルを保存します')
        save_action.triggered.connect(self.save_file)
        file_menu.addAction(save_action)
        
        file_menu.addSeparator()
        
        # 終了アクション
        exit_action = QAction('終了(&X)', self)
        exit_action.setShortcut('Ctrl+Q')
        exit_action.setStatusTip('アプリケーションを終了します')
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)
        
        # 編集メニュー
        edit_menu = menubar.addMenu('編集(&E)')
        
        # コピーアクション
        copy_action = QAction('コピー(&C)', self)
        copy_action.setShortcut('Ctrl+C')
        copy_action.setStatusTip('選択したテキストをコピーします')
        edit_menu.addAction(copy_action)
        
        # 貼り付けアクション
        paste_action = QAction('貼り付け(&V)', self)
        paste_action.setShortcut('Ctrl+V')
        paste_action.setStatusTip('クリップボードからテキストを貼り付けます')
        edit_menu.addAction(paste_action)
        
        # ツールメニュー
        tools_menu = menubar.addMenu('ツール(&T)')
        
        # 設定アクション
        settings_action = QAction('設定(&S)', self)
        settings_action.setStatusTip('アプリケーションの設定を開きます')
        settings_action.triggered.connect(self.show_settings)
        tools_menu.addAction(settings_action)
        
        # ヘルプメニュー
        help_menu = menubar.addMenu('ヘルプ(&H)')
        
        # バージョン情報アクション
        about_action = QAction('バージョン情報(&A)', self)
        about_action.setStatusTip('アプリケーションの情報を表示します')
        about_action.triggered.connect(self.show_about)
        help_menu.addAction(about_action)
    
    def setup_toolbar(self):
        """ツールバーを設定"""
        toolbar = self.addToolBar('メイン')
        toolbar.setToolButtonStyle(Qt.ToolButtonStyle.ToolButtonTextUnderIcon)
        
        # 新規作成ボタン
        new_action = QAction('新規', self)
        new_action.setStatusTip('新しいファイルを作成します')
        new_action.triggered.connect(self.new_file)
        toolbar.addAction(new_action)
        
        # 開くボタン
        open_action = QAction('開く', self)
        open_action.setStatusTip('ファイルを開きます')
        open_action.triggered.connect(self.open_file)
        toolbar.addAction(open_action)
        
        # 保存ボタン
        save_action = QAction('保存', self)
        save_action.setStatusTip('ファイルを保存します')
        save_action.triggered.connect(self.save_file)
        toolbar.addAction(save_action)
        
        toolbar.addSeparator()
        
        # 設定ボタン
        settings_action = QAction('設定', self)
        settings_action.setStatusTip('アプリケーションの設定を開きます')
        settings_action.triggered.connect(self.show_settings)
        toolbar.addAction(settings_action)
    
    def setup_statusbar(self):
        """ステータスバーを設定"""
        status_bar = self.statusBar()
        status_bar.showMessage('準備完了')
        
        # 永続的なステータス表示
        self.status_label = QLabel('準備完了')
        status_bar.addPermanentWidget(self.status_label)
    
    def connect_events(self):
        """イベントを接続"""
        try:
            # イベントバスからのイベントを購読
            self.event_bus.subscribe('message_received', self.on_message_received)
            self.event_bus.subscribe('status_update', self.on_status_update)
            self.event_bus.subscribe('error_occurred', self.on_error_occurred)
            
            logger.info("イベントハンドラーが接続されました")
        except Exception as e:
            logger.error(f"イベント接続中にエラーが発生しました: {e}")
    
    def send_message(self):
        """メッセージを送信"""
        message = self.chat_input.text().strip()
        if not message:
            return
        
        try:
            # チャット表示に追加
            self.chat_display.append(f"<b>ユーザー:</b> {message}")
            
            # 入力欄をクリア
            self.chat_input.clear()
            
            # イベントを発行
            self.event_bus.emit('message_sent', {
                'message': message,
                'timestamp': self.get_current_timestamp(),
                'sender': 'user'
            })
            
            # ステータス更新
            self.update_status(f"メッセージを送信しました: {message[:30]}...")
            
            logger.info(f"メッセージを送信: {message}")
            
        except Exception as e:
            logger.error(f"メッセージ送信中にエラーが発生しました: {e}")
            self.show_error_message("メッセージの送信に失敗しました", str(e))
    
    def on_message_received(self, data: Dict[str, Any]):
        """メッセージ受信時の処理"""
        try:
            message = data.get('message', '')
            sender = data.get('sender', 'システム')
            timestamp = data.get('timestamp', self.get_current_timestamp())
            
            # HTMLフォーマットでメッセージを表示
            formatted_message = f"<b>{sender}:</b> {message} <i>({timestamp})</i>"
            self.chat_display.append(formatted_message)
            
            # 自動スクロール
            self.chat_display.verticalScrollBar().setValue(
                self.chat_display.verticalScrollBar().maximum()
            )
            
            logger.info(f"メッセージを受信: {sender} - {message}")
            
        except Exception as e:
            logger.error(f"メッセージ受信処理中にエラーが発生しました: {e}")
    
    def on_status_update(self, data: Dict[str, Any]):
        """ステータス更新時の処理"""
        try:
            status = data.get('status', '')
            self.update_status(status)
            
        except Exception as e:
            logger.error(f"ステータス更新中にエラーが発生しました: {e}")
    
    def on_error_occurred(self, data: Dict[str, Any]):
        """エラー発生時の処理"""
        try:
            error_message = data.get('message', '不明なエラーが発生しました')
            error_details = data.get('details', '')
            
            self.show_error_message(error_message, error_details)
            self.update_status(f"エラー: {error_message}")
            
        except Exception as e:
            logger.error(f"エラー処理中にエラーが発生しました: {e}")
    
    def update_status(self, message: str):
        """ステータスを更新"""
        self.statusBar().showMessage(message, 5000)  # 5秒間表示
        if hasattr(self, 'status_label'):
            self.status_label.setText(message)
    
    def get_current_timestamp(self) -> str:
        """現在のタイムスタンプを取得"""
        from datetime import datetime
        return datetime.now().strftime("%H:%M:%S")
    
    def show_error_message(self, title: str, message: str):
        """エラーメッセージを表示"""
        QMessageBox.critical(self, title, message)
    
    def show_info_message(self, title: str, message: str):
        """情報メッセージを表示"""
        QMessageBox.information(self, title, message)
    
    def new_file(self):
        """新規ファイル作成"""
        try:
            logger.info("新規ファイル作成")
            
            # イベント発行
            self.event_bus.emit('file_action', {
                'action': 'new',
                'timestamp': self.get_current_timestamp()
            })
            
            self.update_status("新規ファイルを作成しました")
            
        except Exception as e:
            logger.error(f"新規ファイル作成中にエラーが発生しました: {e}")
            self.show_error_message("新規ファイル作成エラー", str(e))
    
    def open_file(self):
        """ファイルを開く"""
        try:
            from PyQt6.QtWidgets import QFileDialog
            
            file_path, _ = QFileDialog.getOpenFileName(
                self,
                "ファイルを開く",
                "",
                "テキストファイル (*.txt);;すべてのファイル (*)"
            )
            
            if file_path:
                logger.info(f"ファイルを開く: {file_path}")
                
                # イベント発行
                self.event_bus.emit('file_action', {
                    'action': 'open',
                    'file_path': file_path,
                    'timestamp': self.get_current_timestamp()
                })
                
                self.update_status(f"ファイルを開きました: {Path(file_path).name}")
            
        except Exception as e:
            logger.error(f"ファイルを開く際にエラーが発生しました: {e}")
            self.show_error_message("ファイルオープンエラー", str(e))
    
    def save_file(self):
        """ファイルを保存"""
        try:
            from PyQt6.QtWidgets import QFileDialog
            
            file_path, _ = QFileDialog.getSaveFileName(
                self,
                "ファイルを保存",
                "",
                "テキストファイル (*.txt);;すべてのファイル (*)"
            )
            
            if file_path:
                logger.info(f"ファイルを保存: {file_path}")
                
                # イベント発行
                self.event_bus.emit('file_action', {
                    'action': 'save',
                    'file_path': file_path,
                    'timestamp': self.get_current_timestamp()
                })
                
                self.update_status(f"ファイルを保存しました: {Path(file_path).name}")
            
        except Exception as e:
            logger.error(f"ファイル保存中にエラーが発生しました: {e}")
            self.show_error_message("ファイル保存エラー", str(e))
    
    def show_settings(self):
        """設定画面を表示"""
        try:
            logger.info("設定画面を表示")
            
            # 簡単な設定ダイアログ
            from PyQt6.QtWidgets import QDialog, QVBoxLayout, QLabel, QPushButton
            
            dialog = QDialog(self)
            dialog.setWindowTitle("設定")
            dialog.setModal(True)
            dialog.resize(400, 300)
            
            layout = QVBoxLayout(dialog)
            layout.addWidget(QLabel("設定画面（開発中）"))
            
            close_button = QPushButton("閉じる")
            close_button.clicked.connect(dialog.accept)
            layout.addWidget(close_button)
            
            dialog.exec()
            
            self.update_status("設定画面を表示しました")
            
        except Exception as e:
            logger.error(f"設定画面表示中にエラーが発生しました: {e}")
            self.show_error_message("設定画面エラー", str(e))
    
    def show_about(self):
        """バージョン情報を表示"""
        try:
            app_config = self.config.get('app', {})
            app_name = app_config.get('name', 'LLM Application')
            version = app_config.get('version', '1.0.0')
            description = app_config.get('description', 'LLMアプリケーション')
            
            about_text = f"""
            <h2>{app_name}</h2>
            <p><b>バージョン:</b> {version}</p>
            <p><b>説明:</b> {description}</p>
            <p><b>開発:</b> LLM Development Team</p>
            <hr>
            <p>このアプリケーションはPyQt6を使用して開発されています。</p>
            """
            
            QMessageBox.about(self, 'バージョン情報', about_text)
            
            logger.info("バージョン情報を表示しました")
            
        except Exception as e:
            logger.error(f"バージョン情報表示中にエラーが発生しました: {e}")
            self.show_error_message("バージョン情報エラー", str(e))
    
    def closeEvent(self, event):
        """ウィンドウクローズイベント"""
        try:
            logger.info("メインウィンドウを閉じています...")
            
            # 確認ダイアログ
            reply = QMessageBox.question(
                self,
                '終了確認',
                'アプリケーションを終了しますか？',
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                QMessageBox.StandardButton.No
            )
            
            if reply == QMessageBox.StandardButton.Yes:
                # シグナル発行
                self.window_closed.emit()
                
                # イベントバスのクリーンアップ
                if hasattr(self, 'event_bus'):
                    self.event_bus.emit('application_closing', {
                        'timestamp': self.get_current_timestamp()
                    })
                
                # プラグインマネージャーのクリーンアップ
                if hasattr(self, 'plugin_manager'):
                    self.plugin_manager.cleanup()
                
                event.accept()
                logger.info("メインウィンドウが閉じられました")
            else:
                event.ignore()
                
        except Exception as e:
            logger.error(f"ウィンドウクローズ処理中にエラーが発生しました: {e}")
            event.accept()  # エラーが発生してもウィンドウを閉じる


def main():
    """メイン関数"""
    try:
        app = QApplication(sys.argv)
        
        # アプリケーション情報設定
        app.setApplicationName("LLM Application")
        app.setApplicationVersion("1.0.0")
        app.setOrganizationName("LLM Development Team")
        
        # メインウィンドウ作成
        window = MainWindow()
        window.show()
        
        logger.info("アプリケーションを開始しました")
        
        # アプリケーション実行
        sys.exit(app.exec())
        
    except Exception as e:
        logger.error(f"アプリケーション開始中にエラーが発生しました: {e}")
        sys.exit(1)


if __name__ == '__main__':
    main()

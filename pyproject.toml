# pyproject.toml - LLM Code Assistant プロジェクト設定

[build-system]
requires = ["setuptools>=68.0", "wheel", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "llm-code-assistant"
version = "1.0.0"
description = "AI-powered code generation and assistance tool with local LLM support"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "LLM Code Assistant Team", email = "team@llm-code-assistant.com"}
]
maintainers = [
    {name = "LLM Code Assistant Team", email = "team@llm-code-assistant.com"}
]
keywords = [
    "llm", "ai", "code-generation", "assistant", "development", 
    "openai", "claude", "local-llm", "programming", "automation"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Environment :: X11 Applications :: Qt",
    "Environment :: Win32 (MS Windows)",
    "Environment :: MacOS X"
]
requires-python = ">=3.11"
dependencies = [
    # Core Framework & GUI
    "PyQt6>=6.6.1",
    "PyQt6-Qt6>=6.6.1",
    "PyQt6-sip>=13.6.0",
    
    # LLM & AI Libraries
    "openai>=1.12.0",
    "anthropic>=0.18.1",
    "transformers>=4.38.2",
    "torch>=2.2.1",
    "tokenizers>=0.15.2",
    "accelerate>=0.27.2",
    "sentence-transformers>=2.5.1",
    "llama-cpp-python>=0.2.55",
    "ctransformers>=0.2.27",
    
    # Vector Database & Embeddings
    "faiss-cpu>=1.7.4",
    "chromadb>=0.4.24",
    "numpy>=1.26.4",
    "scipy>=1.12.0",
    
    # Database & Storage
    "SQLAlchemy>=2.0.28",
    "alembic>=1.13.1",
    
    # Web Framework & API
    "fastapi>=0.109.2",
    "uvicorn[standard]>=0.27.1",
    "pydantic>=2.6.4",
    "httpx>=0.27.0",
    "aiohttp>=3.9.3",
    "requests>=2.31.0",
    
    # Configuration & Environment
    "python-dotenv>=1.0.1",
    "pyyaml>=6.0.1",
    "toml>=0.10.2",
    
    # File Processing & Text
    "nltk>=3.9.1",
    "spacy>=3.8.7",
    "python-magic>=0.4.27",
    "python-docx>=1.1.0",
    "openpyxl>=3.1.2",
    "PyPDF2>=3.0.1",
    "markdown>=3.6",
    "beautifulsoup4>=4.12.3",
    
    # Code Analysis
    "autopep8>=2.0.4",
    "black>=24.2.0",
    "flake8>=7.0.0",
    "pylint>=3.1.0",
    "mypy>=1.8.0",
    
    # Syntax Highlighting & Code Editor
    "Pygments>=2.17.2",
    "QScintilla>=2.14.1",
    
    # Git Integration
    "GitPython>=3.1.42",
    
    # Encryption & Security
    "cryptography>=42.0.5",
    "bcrypt>=4.1.2",
    "keyring>=24.3.1",
    
    # Logging & Monitoring
    "loguru>=0.7.2",
    "structlog>=24.1.0",
    "psutil>=6.1.0",
    
    # Async & Concurrency
    "aiofiles>=23.2.1",
    
    # Image Processing
    "Pillow>=10.2.0",
    
    # Template Engine
    "Jinja2>=3.1.3",
    
    # Plugin System
    "pluggy>=1.4.0",
    
    # Utilities
    "tqdm>=4.66.2",
    "colorama>=0.4.6",
    "click>=8.1.7",
    "rich>=13.7.1",
    "python-dateutil>=2.9.0",
    "watchdog>=4.0.0",
    "typing-extensions>=4.10.0"
]

[project.optional-dependencies]
# 開発用依存関係
dev = [
    "pre-commit>=3.6.2",
    "black>=24.2.0",
    "isort>=5.13.2",
    "flake8>=7.0.0",
    "mypy>=1.8.0",
    "bandit>=1.7.7",
    "safety>=3.5.2"
]

# テスト用依存関係
test = [
    "pytest>=8.1.1",
    "pytest-asyncio>=0.23.5",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.12.0",
    "pytest-qt>=4.3.1",
    "coverage>=7.4.3"
]

# ドキュメント生成用依存関係
docs = [
    "sphinx>=7.2.6",
    "sphinx-rtd-theme>=2.0.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.25.0"
]

# GPU サポート用依存関係
gpu = [
    "torch[cuda]>=2.2.1",
    "faiss-gpu>=1.7.4"
]

# データ分析用依存関係
analysis = [
    "pandas>=2.2.1",
    "matplotlib>=3.8.3",
    "seaborn>=0.13.2",
    "plotly>=5.19.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.29.3"
]

# エクスポート機能用依存関係
export = [
    "reportlab>=4.1.0",
    "weasyprint>=61.2",
    "fpdf2>=2.7.8"
]

# 音声機能用依存関係
audio = [
    "pygame>=2.5.2",
    "playsound>=1.3.0"
]

# 完全版（全ての機能を含む）
full = [
    "llm-code-assistant[dev,test,docs,gpu,analysis,export,audio]"
]

[project.urls]
Homepage = "https://github.com/llm-code-assistant/llm-code-assistant"
Documentation = "https://llm-code-assistant.readthedocs.io/"
Repository = "https://github.com/llm-code-assistant/llm-code-assistant"
"Bug Tracker" = "https://github.com/llm-code-assistant/llm-code-assistant/issues"
Changelog = "https://github.com/llm-code-assistant/llm-code-assistant/blob/main/CHANGELOG.md"

[project.scripts]
llm-code-assistant = "src.main:main"
llm-assistant = "src.main:main"

[project.gui-scripts]
llm-code-assistant-gui = "src.main:main_gui"

[tool.setuptools]
package-dir = {"" = "."}

[tool.setuptools.packages.find]
where = ["."]
include = ["src*", "config*", "data*"]
exclude = ["tests*", "docs*", "scripts*", "assets*"]

[tool.setuptools.package-data]
"config" = ["*.json", "*.yaml", "*.yml"]
"data" = ["**/*.json", "**/*.template", "**/*.py", "**/*.js", "**/*.html"]
"assets" = ["**/*.png", "**/*.ico", "**/*.json", "**/*.wav"]

# Black フォーマッター設定
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort インポートソート設定
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src", "config", "data"]
known_third_party = ["PyQt6", "openai", "anthropic", "transformers", "torch"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# MyPy 型チェック設定
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "PyQt6.*",
    "openai.*",
    "anthropic.*",
    "transformers.*",
    "torch.*",
    "faiss.*",
    "chromadb.*",
    "llama_cpp.*",
    "ctransformers.*"
]
ignore_missing_imports = true

# Pytest テスト設定
[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "ui: marks tests as UI tests",
    "llm: marks tests as LLM tests",
    "gpu: marks tests requiring GPU",
    "network: marks tests requiring network access"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

# Coverage 設定
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]

# Bandit セキュリティチェック設定
[tool.bandit]
exclude_dirs = ["tests", "docs", "scripts"]
skips = ["B101", "B601"]

# Flake8 設定（setup.cfg または .flake8 ファイルでも設定可能）
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist",
    ".venv",
    "venv"
]

# Pylint 設定
[tool.pylint.messages_control]
disable = [
    "C0330",  # Wrong hanging indentation
    "C0326",  # Bad whitespace
    "R0903",  # Too few public methods
    "R0913",  # Too many arguments
    "W0613",  # Unused argument
]

[tool.pylint.format]
max-line-length = 88

# Ruff リンター設定（オプション）
[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101"]

# Pre-commit hooks 設定
[tool.pre-commit]
repos = [
    {
        repo = "https://github.com/pre-commit/pre-commit-hooks",
        rev = "v4.5.0",
        hooks = [
            {id = "trailing-whitespace"},
            {id = "end-of-file-fixer"},
            {id = "check-yaml"},
            {id = "check-added-large-files"},
            {id = "check-merge-conflict"},
            {id = "debug-statements"}
        ]
    },
    {
        repo = "https://github.com/psf/black",
        rev = "24.2.0",
        hooks = [{id = "black"}]
    },
    {
        repo = "https://github.com/pycqa/isort",
        rev = "5.13.2",
        hooks = [{id = "isort"}]
    },
    {
        repo = "https://github.com/pycqa/flake8",
        rev = "7.0.0",
        hooks = [{id = "flake8"}]
    },
    {
        repo = "https://github.com/pre-commit/mirrors-mypy",
        rev = "v1.8.0",
        hooks = [{id = "mypy"}]
    }
]
